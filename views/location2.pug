doctype html
html
	head
		title Location
		link(rel='stylesheet' href='location.css')
		meta(name='viewport' content='initial-scale=1.0, user-scalable=no')
		meta(charset='utf-8')
	body
		#pac-card.pac-card
			div
				#type-selector.pac-controls
					input#changetype-all(type='radio' name='type' checked='checked')
					label(for='changetype-all') All
					input#changetype-establishment(type='radio' name='type')
					label(for='changetype-establishment') Establishments
					input#changetype-address(type='radio' name='type')
					label(for='changetype-address') Addresses
					input#changetype-geocode(type='radio' name='type')
					label(for='changetype-geocode') Geocodes
				#strict-bounds-selector.pac-controls
					input#use-strict-bounds(type='checkbox' value='')
					label(for='use-strict-bounds') Strict Bounds
			#pac-container
				input#pac-input(type='text' placeholder='Enter a location')
		#map
		#infowindow-content
			img#place-icon(src='' width='16' height='16')
			span#place-name.title
			br
			span#place-address
		script.
			// This example requires the Places library. Include the libraries=places
			// parameter when you first load the API. For example:
			// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
			function initMap() {
			var map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: -33.9058688, lng: 18.415616},
			zoom: 13
			});
			var card = document.getElementById('pac-card');
			var input = document.getElementById('pac-input');
			var types = document.getElementById('type-selector');
			var strictBounds = document.getElementById('strict-bounds-selector');
			map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);
			var options = {
				componentRestrictions: {country: "za"}
			};
			var autocomplete = new google.maps.places.Autocomplete(input, options);
			// Bind the map's bounds (viewport) property to the autocomplete object,
			// so that the autocomplete requests use the current map bounds for the
			// bounds option in the request.
			autocomplete.bindTo('bounds', map);
			// Set the data fields to return when the user selects a place.
			autocomplete.setFields(
			['address_components', 'geometry', 'icon', 'name']);
			var infowindow = new google.maps.InfoWindow();
			var infowindowContent = document.getElementById('infowindow-content');
			infowindow.setContent(infowindowContent);
			var marker = new google.maps.Marker({
			map: map,
			anchorPoint: new google.maps.Point(0, -29)
			});
			autocomplete.addListener('place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
			// User entered the name of a Place that was not suggested and
			// pressed the Enter key, or the Place Details request failed.
			window.alert("No details available for input: '" + place.name + "'");
			return;
			}
			// If the place has a geometry, then present it on a map.
			if (place.geometry.viewport) {
			map.fitBounds(place.geometry.viewport);
			} else {
			map.setCenter(place.geometry.location);
			map.setZoom(17);  // Why 17? Because it looks good.
			}
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);
			var address = '';
			if (place.address_components) {
			address = [
			(place.address_components[0] && place.address_components[0].short_name || ''),
			(place.address_components[1] && place.address_components[1].short_name || ''),
			(place.address_components[2] && place.address_components[2].short_name || '')
			].join(' ');
			}
			infowindowContent.children['place-icon'].src = place.icon;
			infowindowContent.children['place-name'].textContent = place.name;
			infowindowContent.children['place-address'].textContent = address;
			infowindow.open(map, marker);
			});
			// Sets a listener on a radio button to change the filter type on Places
			// Autocomplete.
			function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
			radioButton.addEventListener('click', function() {
			autocomplete.setTypes(types);
			});
			}
			setupClickListener('changetype-all', []);
			setupClickListener('changetype-address', ['address']);
			setupClickListener('changetype-establishment', ['establishment']);
			setupClickListener('changetype-geocode', ['geocode']);
			document.getElementById('use-strict-bounds')
			.addEventListener('click', function() {
			console.log('Checkbox clicked! New state=' + this.checked);
			autocomplete.setOptions({strictBounds: this.checked});
			});
			}
		script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyBbM1RQ9usKaBQ8uIWG2QwbfEYy9lFdOF8&libraries=places&callback=initMap' async='' defer='')
